name: "Containers: Test-and-Build"

on:
  workflow_dispatch:
  push:
    branches:
    - master
    paths:
    - 'apps/**'
    - 'dev/**'
    - 'base/**'
    - 'mirror/**'
    - ".github/workflows/containers.build.yaml"
  pull_request:
    paths:
    - 'apps/**'
    - 'dev/**'
    - 'base/**'
    - 'mirror/**'
    - ".github/workflows/containers.build.yaml"

env:
  # How long to sleep before running the tests (gives the application time to start)
  GOSS_SLEEP: 30

# Detect which folders in project-root (which contain the containers) contain changes
jobs:
  changes:
    name: Get changes
    runs-on: ubuntu-20.04
    outputs:
      matrix: "{\"container\": ${{ steps.reduce.outputs.containers }} }"
    steps:
    - name: Checkout
      uses: actions/checkout@dcd71f646680f2efd8db4afa5ad64fdcba30e748 # tag=v3
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        list-files: json
        filters: |
          changed:
          - 'apps/**'
          - 'dev/**'
          - 'base/**'
          - 'mirror/**'
    - run: echo '${{ toJson(steps.filter.outputs) }}' > changes.json
    - id: reduce
      run: |
        CONTAINERS=$(jq --raw-output '.changed_files | fromjson | .[] |= sub("(?<filepath>(?<first_directory>(?<root1>[/]?)[^/]+/)(?<second_directory>(?<root2>[/]?)[^/]+)(?<extra_paths>.+))"; "\(.second_directory)") | unique' changes.json)
        echo ::set-output name=containers::${CONTAINERS}

  hadolint:
    name: Run hadolint
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@dcd71f646680f2efd8db4afa5ad64fdcba30e748 # tag=v3
    - name: hadolint
      uses: reviewdog/action-hadolint@0e7a869dbe1c30ca2b3facbc9067148187e9ab5a # tag=v1.32.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        reporter: github-pr-review
        filter_mode: diff_context
        hadolint_ignore: DL3007
        fail_on_error: true

  build:
    name: Build
    runs-on: ubuntu-20.04
    needs:
    - hadolint
    - changes
    strategy:
      matrix: ${{ fromJson(needs.changes.outputs.matrix) }}
      fail-fast: false
    if: "!contains(github.event.head_commit.message, '[ci-skip]')"
    steps:
    - name: Checkout
      uses: actions/checkout@dcd71f646680f2efd8db4afa5ad64fdcba30e748 # tag=v3

    # Define if tests and push should be run against which versions/platforms
    - name: Prepare
      id: prep
      run: |
        if test -f "./apps/${{ matrix.container }}/Dockerfile"; then
          CATEGORY="apps"
          VERSION=$(cat ./${CATEGORY}/${{ matrix.container }}/VERSION)
        elif test -f "./dev/${{ matrix.container }}/Dockerfile"; then
          CATEGORY="dev"
          VERSION=$(cat ./${CATEGORY}/${{ matrix.container }}/VERSION)
        elif test -f "./mirror/${{ matrix.container }}/Dockerfile"; then
          CATEGORY="mirror"
          echo ::set-output name=category::${CATEGORY}
          VERSION="$(head -1 ./${CATEGORY}/${{ matrix.container }}/Dockerfile |  cut -d'@' -f1 | sed 's/^FROM.*://' )"
          VERSION=$(echo $VERSION | sed "s/latest-//g")
          VERSION=$(echo $VERSION | sed "s/edge-//g")
          VERSION=$(echo $VERSION | sed "s/cpu-//g")
          VERSION=$(echo $VERSION | sed "s/gpu-//g")
          VERSION=$(echo $VERSION | sed "s/release-//g")
          VERSION=$(echo $VERSION | sed "s/release_//g")
          VERSION=$(echo $VERSION | sed "s/version-//g")
          VERSION=$(echo $VERSION | sed "s/version_//g")
          VERSION=$(echo $VERSION | sed "s/apache-//g")
          VERSION=$(echo $VERSION | sed "s/fpm-//g")
          VERSION="${VERSION#*V.}"
          VERSION="${VERSION#*v.}"
          VERSION="${VERSION#*v-}"
          VERSION="${VERSION#*v}"
          VERSION="${VERSION%-*}"
        else
          CATEGORY="base"
          VERSION=$(cat ./${CATEGORY}/${{ matrix.container }}/VERSION)
        fi
        echo ::set-output name=category::${CATEGORY}
        echo ::set-output name=version::${VERSION}
        PLATFORM="linux/amd64"
        echo ::set-output name=platform::${PLATFORM}
        if test -f "./${CATEGORY}/${{ matrix.container }}/goss.yaml"; then
          echo ::set-output name=goss::true
        else
          echo ::set-output name=goss::false
        fi
        if [ "${{github.event_name}}" == "pull_request" ]; then
          echo ::set-output name=push::false
          echo ::set-output name=cache_from::"type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:buildcache" || echo ::set-output name=cache_from::""
          echo ::set-output name=cache_to::""
        else
          echo ::set-output name=push::true
          echo ::set-output name=cache_from::"type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:buildcache"
          echo ::set-output name=cache_to::"type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:buildcache,mode=max"
        fi

    - name: Set up QEMU
      uses: docker/setup-qemu-action@27d0a4f181a40b142cce983c5393082c365d1480 # renovate: tag=v1
      with:
        platforms: amd64

    - name: Login to GHCR
      uses: docker/login-action@dd4fa0671be5250ee6f50aedf4cb05514abda2c7 # tag=v1
      if: github.event_name != 'pull_request'
      with:
        registry: ghcr.io
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Login to DockerHub
      uses: docker/login-action@dd4fa0671be5250ee6f50aedf4cb05514abda2c7 # tag=v1
      if: github.event_name != 'pull_request'
      with:
        username: ${{ secrets.DH_USER }}
        password: ${{ secrets.DH_SECRET }}

    - name: Login to Quay
      uses: docker/login-action@dd4fa0671be5250ee6f50aedf4cb05514abda2c7 # tag=v1
      if: github.event_name != 'pull_request'
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_USER }}
        password: ${{ secrets.QUAY_SECRET }}

    # Install and configure Buildx
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@94ab11c41e45d028884a99163086648e898eed25 # renovate: tag=v1
      with:
        install: true
        version: latest
        driver-opts: image=moby/buildkit:master

    # Install the GOSS testing framework
    - name: Set up goss/dgoss
      uses: e1himself/goss-installation-action@88e5a33ec3f7d299fee2e259ff1a6032cb0cdd11 # renovate: tag=v1.0.4
      if: ${{ steps.prep.outputs.goss == 'true' }}
      with:
        version: 'v0.3.16'

    # Creates a local build to run tests on
    - name: Build and Load local test-container
      if: ${{ steps.prep.outputs.goss == 'true' }}
      uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a # tag=v2
      with:
        build-args: VERSION=${{ steps.prep.outputs.version }}
        context: .
        file: ./${{ steps.prep.outputs.category }}/${{ matrix.container }}/Dockerfile
        load: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:test
        cache-from: ${{ steps.prep.outputs.cache_from }}
        cache-to: ${{ steps.prep.outputs.cache_to }}

    # Run GOSS tests if included with the container
    - name: Run GOSS tests
      if: ${{ steps.prep.outputs.goss == 'true' }}
      env:
        GOSS_FILE: ./${{ steps.prep.outputs.category }}/${{ matrix.container }}/goss.yaml
      run: |
        dgoss run ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:test

    # Push if not a PR, otherwise just test the build process for all requested platforms
    - name: Build and Push
      uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a # tag=v2
      with:
        build-args: VERSION=${{ steps.prep.outputs.version }}
        context: .
        platforms: ${{ steps.prep.outputs.platform }}
        file: ./${{ steps.prep.outputs.category }}/${{ matrix.container }}/Dockerfile
        push: ${{ steps.prep.outputs.push }}
        tags: |
          ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:latest
          ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:v${{ steps.prep.outputs.version }}
          truecharts/${{ matrix.container }}:latest
          truecharts/${{ matrix.container }}:v${{ steps.prep.outputs.version }}
          quay.io/truecharts/${{ matrix.container }}:latest
          quay.io/truecharts/${{ matrix.container }}:v${{ steps.prep.outputs.version }}
        cache-from: ${{ steps.prep.outputs.cache_from }}
        cache-to: ${{ steps.prep.outputs.cache_to }}

  container-build-complete:
    needs: [build]
    name: Container Build Completed
    runs-on: ubuntu-latest
    steps:
      - name: complete message
        run: echo "Container Build and Tests Completed Successfully"
        
  automerge:
    needs: [container-build-complete]
    name: Automerge build
    runs-on: ubuntu-latest
    steps:
      - name: automerge
        uses: pascalgn/automerge-action@8b306ad1983d0ea68c43e27101123e891ecff104 # tag=v0.15.2
        env:
          GITHUB_TOKEN: "${{ secrets.BOT_TOKEN }}"
          UPDATE_RETRIES: 12
          UPDATE_RETRY_SLEEP: 60000
