name: "Containers: Test-and-Build"

on:
  workflow_dispatch:
  push:
    branches:
    - master
    paths:
    - 'apps/**'
    - 'dev/**'
    - 'base/**'
    - 'mirror/**'
    - ".github/workflows/containers.build.yaml"
  pull_request:
    paths:
    - 'apps/**'
    - 'dev/**'
    - 'base/**'
    - 'mirror/**'
    - ".github/workflows/containers.build.yaml"

env:
  # How long to sleep before running the tests (gives the application time to start)
  GOSS_SLEEP: 30

# Detect which folders in project-root (which contain the containers) contain changes
jobs:
  changes:
    name: Get changes
    runs-on: ubuntu-20.04
    outputs:
      matrix: "{\"container\": ${{ steps.reduce.outputs.containers }} }"
    steps:
    - name: Checkout
      uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        list-files: json
        filters: |
          changed:
          - 'apps/**'
          - 'dev/**'
          - 'base/**'
          - 'mirror/**'
    - run: echo '${{ toJson(steps.filter.outputs) }}' > changes.json
    - id: reduce
      run: |
        CONTAINERS=$(jq --raw-output '.changed_files | fromjson | .[] |= sub("(?<filepath>(?<first_directory>(?<root1>[/]?)[^/]+/)(?<second_directory>(?<root2>[/]?)[^/]+)(?<extra_paths>.+))"; "\(.second_directory)") | unique' changes.json)
        echo ::set-output name=containers::${CONTAINERS}

  hadolint:
    name: Run hadolint
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3
    - name: hadolint
      uses: reviewdog/action-hadolint@141ffd8d2f0b75e6fc7c87341331985448b62aa4 # v1.34.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        reporter: github-pr-review
        filter_mode: diff_context
        hadolint_ignore: DL3007
        fail_on_error: true

  build:
    name: Build
    runs-on: ubuntu-20.04
    needs:
    - hadolint
    - changes
    strategy:
      matrix: ${{ fromJson(needs.changes.outputs.matrix) }}
      fail-fast: false
    if: "!contains(github.event.head_commit.message, '[ci-skip]')"
    steps:
    - name: Checkout
      uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3

    # Define if tests and push should be run against which versions/platforms
    - name: Prepare
      id: prep
      run: |
        if test -f "./apps/${{ matrix.container }}/Dockerfile"; then
          CATEGORY="apps"
          VERSION=$(cat ./${CATEGORY}/${{ matrix.container }}/VERSION)
        elif test -f "./dev/${{ matrix.container }}/Dockerfile"; then
          CATEGORY="dev"
          VERSION=$(cat ./${CATEGORY}/${{ matrix.container }}/VERSION)
        elif test -f "./mirror/${{ matrix.container }}/Dockerfile"; then
          CATEGORY="mirror"
          echo ::set-output name=category::${CATEGORY}
          VERSION="$(head -1 ./${CATEGORY}/${{ matrix.container }}/Dockerfile |  cut -d'@' -f1 | sed 's/^FROM.*://' )"
          VERSION=$(echo $VERSION | sed "s/latest-//g")
          VERSION=$(echo $VERSION | sed "s/stable-//g")
          VERSION=$(echo $VERSION | sed "s/edge-//g")
          VERSION=$(echo $VERSION | sed "s/cpu-//g")
          VERSION=$(echo $VERSION | sed "s/gpu-//g")
          VERSION=$(echo $VERSION | sed "s/release-//g")
          VERSION=$(echo $VERSION | sed "s/release_//g")
          VERSION=$(echo $VERSION | sed "s/version-//g")
          VERSION=$(echo $VERSION | sed "s/version_//g")
          VERSION=$(echo $VERSION | sed "s/apache-//g")
          VERSION=$(echo $VERSION | sed "s/ubuntu-//g")
          VERSION=$(echo $VERSION | sed "s/focal-//g")
          VERSION=$(echo $VERSION | sed "s/fpm-//g")
          VERSION=$(echo $VERSION | sed "s/vaapi-//g")
          VERSION=$(echo $VERSION | sed "s/cuda-//g")
          VERSION=$(echo $VERSION | sed "s/-centos7//g")
          VERSION=$(echo $VERSION | sed "s/java[0-9]*-//g")
          VERSION="${VERSION#*V.}"
          VERSION="${VERSION#*v.}"
          VERSION="${VERSION#*v-}"
          VERSION="${VERSION#*v}"
          VERSION="${VERSION%-*}"
          if (echo "$VERSION" | grep -Pq "^\d+\.\d+$"); then
            VERSION="${VERSION}.0"
          fi;
        else
          CATEGORY="base"
          VERSION=$(cat ./${CATEGORY}/${{ matrix.container }}/VERSION) || VERSION="$(head -1 ./${CATEGORY}/${{ matrix.container }}/Dockerfile |  cut -d'@' -f1 | sed 's/^FROM.*://' )"
          VERSION=$(echo $VERSION | sed "s/latest-//g")
          VERSION=$(echo $VERSION | sed "s/stable-//g")
          VERSION="${VERSION#*V.}"
          VERSION="${VERSION#*v.}"
          VERSION="${VERSION#*v-}"
          VERSION="${VERSION#*v}"
          VERSION="${VERSION%-*}"
          if (echo "$VERSION" | grep -Pq "^\d+\.\d+$"); then
            VERSION="${VERSION}.0"
          fi;
        fi
        echo ::set-output name=category::${CATEGORY}
        echo ::set-output name=version::${VERSION}
        PLATFORM="linux/amd64"
        echo ::set-output name=platform::${PLATFORM}
        if test -f "./${CATEGORY}/${{ matrix.container }}/goss.yaml"; then
          echo ::set-output name=goss::true
        else
          echo ::set-output name=goss::false
        fi
        if [ "${{github.event_name}}" == "pull_request" ]; then
          echo ::set-output name=push::false
          echo ::set-output name=cache_from::"type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:buildcache" || echo ::set-output name=cache_from::""
          echo ::set-output name=cache_to::""
        else
          echo ::set-output name=push::true
          echo ::set-output name=cache_from::"type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:buildcache"
          echo ::set-output name=cache_to::"type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:buildcache,mode=max"
        fi

    - name: Get Time
      id: time
      uses: nanzm/get-time-action@5fb6a88787f272aeb246a10ebb8fabeb5f3c7b9c # tag=v1.1
      with:
        timeZone: 1
        format: 'YYYYMMDDHHmmss'

    - name: Set up QEMU
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18 # tag=v2
      with:
        platforms: amd64

    - name: Login to Quay
      uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # tag=v2
      if: github.event_name != 'pull_request'
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_USER }}
        password: ${{ secrets.QUAY_SECRET }}

    - name: Login to DockerHub
      uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # tag=v2
      if: github.event_name != 'pull_request'
      with:
        username: ${{ secrets.DH_USER }}
        password: ${{ secrets.DH_SECRET }}

    - name: Login to GHCR
      uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # tag=v2
      if: github.event_name != 'pull_request'
      with:
        registry: ghcr.io
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@507c2f2dc502c992ad446e3d7a5dfbe311567a96 # v4
      with:
        # list of Docker images to use as base name for tags
        images: |
          truecharts/${{ matrix.container }}
          quay.io/truecharts/${{ matrix.container }}
          ghcr.io/truecharts/${{ matrix.container }}
          tccr.io/truecharts/${{ matrix.container }}
          docker.io/truecharts/${{ matrix.container }}

    # Install and configure Buildx
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7 # v2
      with:
        install: true
        version: latest
        driver-opts: image=moby/buildkit:latest

    # Install the GOSS testing framework
    - name: Set up goss/dgoss
      uses: e1himself/goss-installation-action@3b8952d233bcc9bb8e901ec819d8cde6daa7f546 # tag=v1.1.0
      if: ${{ steps.prep.outputs.goss == 'true' }}
      with:
        version: 'v0.3.16'

    # Creates a local build to run tests on
    - name: Build and Load local test-container
      if: ${{ steps.prep.outputs.goss == 'true' }}
      uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671 # v4
      with:
        build-args: |
          VERSION=${{ steps.prep.outputs.version }}
          CONTAINER_NAME=${{ matrix.container }}
          CONTAINER_VER=${{ steps.prep.outputs.version }}
        context: .
        file: ./${{ steps.prep.outputs.category }}/${{ matrix.container }}/Dockerfile
        load: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:test
        cache-from: ${{ steps.prep.outputs.cache_from }}
        cache-to: ${{ steps.prep.outputs.cache_to }}

    # Run GOSS tests if included with the container
    - name: Run GOSS tests
      if: ${{ steps.prep.outputs.goss == 'true' }}
      env:
        GOSS_FILE: ./${{ steps.prep.outputs.category }}/${{ matrix.container }}/goss.yaml
      run: |
        dgoss run ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:test

    # Push if not a PR, otherwise just test the build process for all requested platforms
    - name: Build and Push
      id: push
      uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671 # v4
      with:
        build-args: |
          VERSION=${{ steps.prep.outputs.version }}
          CONTAINER_NAME=${{ matrix.container }}
          CONTAINER_VER=${{ steps.prep.outputs.version }}
        context: .
        platforms: ${{ steps.prep.outputs.platform }}
        file: ./${{ steps.prep.outputs.category }}/${{ matrix.container }}/Dockerfile
        push: ${{ steps.prep.outputs.push }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: ${{ steps.prep.outputs.cache_from }}
        cache-to: ${{ steps.prep.outputs.cache_to }}
        tags: |
          quay.io/truecharts/${{ matrix.container }}:latest
          quay.io/truecharts/${{ matrix.container }}:v${{ steps.prep.outputs.version }}
          quay.io/truecharts/${{ matrix.container }}:${{ steps.prep.outputs.version }}
          quay.io/truecharts/${{ matrix.container }}:build${{ steps.time.outputs.time }}
          truecharts/${{ matrix.container }}:latest
          truecharts/${{ matrix.container }}:v${{ steps.prep.outputs.version }}
          truecharts/${{ matrix.container }}:${{ steps.prep.outputs.version }}
          truecharts/${{ matrix.container }}:build${{ steps.time.outputs.time }}
          ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:latest
          ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:v${{ steps.prep.outputs.version }}
          ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:${{ steps.prep.outputs.version }}
          ghcr.io/truecharts/${{ matrix.container }}:build${{ steps.time.outputs.time }}


    - name: Set quay to Public
      run: |
        curl -X POST -H "Content-Type: application/json" -d '{"visibility": "public"}' -H "Authorization: Bearer ${{ secrets.QUAY_TOKEN }}" "https://quay.io/api/v1/repository/truecharts/${{ matrix.container }}/changevisibility"

  container-build-complete:
    needs: [build]
    name: Container Build Completed
    runs-on: ubuntu-latest
    steps:
      - name: complete message
        run: echo "Container Build and Tests Completed Successfully"

  automerge:
    needs: [container-build-complete]
    if: github.event_name == 'pull_request'
    name: Automerge build
    runs-on: ubuntu-latest
    steps:
      - name: automerge
        uses: pascalgn/automerge-action@eb68b061739cb9d81564f8e812d0b3c45f0fb09a # tag=v0.15.5
        env:
          GITHUB_TOKEN: "${{ secrets.BOT_TOKEN }}"
          UPDATE_RETRIES: 12
          UPDATE_RETRY_SLEEP: 60000
